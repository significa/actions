name: Vercel app

on:
  workflow_call:
    inputs:
      install_command:
        description: Install command.
        type: string
        required: false
        default: npm ci --prefer-offline --no-audit --no-fund

      lint_command:
        description: Lint command.
        type: string
        required: false
        default: npm run lint
      
      test_command:
        description: Test command.
        type: string
        required: false
        default: npm run test

      npm_scope:
        description: "NPM scope (containing the '@' symbol, ex: @example)."
        type: string
        required: false
        default: null

      install_registry_url:
        description: >-
          The NPM registry URL to install scoped packages from.
          Scope specified in the input `npm_scope`.
          For example `https://registry.npmjs.org/` for the official NPM registry
          or `https://npm.pkg.github.com/` for GitHub's registry.
        required: false
        default: null
        type: string

      staging_branch:
        description: The branch name for the staging environment.
        required: false
        type: string
        default: main

      staging_domain:
        description: Staging domain (main preview domain, deployed on push to the `staging_branch`).
        required: false
        type: string

      production_domain:
        description: Production domain (domain to be applied for the production releases).
        required: false
        type: string

      vercel_scope:
        description: DEPRECATED
        required: false
        type: string

      job_timeout_minutes:
        description: Job maximum execution time in minutes.
        required: false
        type: number
        default: 10

    secrets:
      VERCEL_TOKEN:
        required: true
      VERCEL_ORG_ID:
        required: true
      VERCEL_PROJECT_ID:
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}-vercel-app
  cancel-in-progress: false

jobs:
  test-and-lint:
    name: Test and lint
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.job_timeout_minutes }}
    permissions:
      contents: read
      packages: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Custom checks for configs
        run: |
          [ -f "./.nvmrc" ] || (echo "Required .nvmrc file does not exist" >&2 && echo 1)
          [ -f "./vercel.json" ] || (echo "Required vercel.json file does not exist" >&2 && echo 1)

      - name: Delete commited .npmrc
        run: rm -f .npmrc

      - uses: actions/setup-node@v5
        with:
          node-version-file: '.nvmrc'
          cache: npm
          scope: ${{ inputs.npm_scope }}
          registry-url: ${{ inputs.install_registry_url }}

      - name: Install dependencies
        run: ${{ inputs.install_command }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Lint
        if: inputs.lint_command
        run: ${{ inputs.lint_command }}

      - name: Test
        if: inputs.test_command
        run: ${{ inputs.test_command }}
  
  build-and-depploy:
    name: Build and deploy
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.job_timeout_minutes }}
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    permissions:
      deployments: write
      contents: read
      packages: read
    needs:
      - test-and-lint
    steps:
      - name: Assert valid release name
        if: |
          github.event_name == 'release'
          && ! (
            startsWith(github.event.release.name, 'v')
            && startsWith(github.event.release.tag_name, 'v')
          )
        run: |
          >&2 echo "Releases must be tagged with a semver complient string prefixed with 'v'. Ex: 'v1.2.3'"
          exit 1

      - uses: actions/checkout@v4

      - uses: actions/setup-node@v5
        with:
          node-version-file: '.nvmrc'
          cache: npm
          scope: ${{ inputs.npm_scope }}
          registry-url: ${{ inputs.install_registry_url }}

      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      
      - name: Set package.json version
        if: (! startsWith(github.ref_name, 'v'))
        run: npm version --no-git-tag-version "v0.0.1-${{ github.sha }}"

      - name: Set package.json version (release)
        if: startsWith(github.ref_name, 'v')
        run: npm version --no-git-tag-version "${{ github.ref_name }}"

      - name: Get Vercel CLI options
        id: vercel_opts
        shell: bash
        run: |
         if [[ "$IS_PRODUCTION" == "true" ]]; then
          echo "Producton"
          echo "environment=production" >> "$GITHUB_OUTPUT"
          echo "extra_options=--prod" >> "$GITHUB_OUTPUT"
         else
          echo "preview"
          echo "environment=preview" >> "$GITHUB_OUTPUT"
          echo "extra_options=" >> "$GITHUB_OUTPUT"
         fi
        env:
          IS_PRODUCTION: ${{ (github.event_name == 'release' || github.event_name == 'workflow_dispatch') && github.ref_type == 'tag' && startsWith(github.ref_name, 'v')}}

      - name: Deploy to Vercel
        id: vercel_deploy
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          vercel pull --yes \
            --environment= ${{ steps.vercel_opts.outputs.environment }} \
            --token="${{ secrets.VERCEL_TOKEN }}"

          vercel build \
            --yes \
            ${{ steps.vercel_opts.outputs.extra_options }} \
            --token="${{ secrets.VERCEL_TOKEN }}"

          vercel deploy \
            --yes \
            ${{ steps.vercel_opts.outputs.extra_options }} \
            --archive=tgz \
            --prebuilt \
            --token="${{ secrets.VERCEL_TOKEN }}" \
            --name="${{ github.ref_name }}" \
          | tee >(tail -1 | sed -e 's/^/preview_url=/;' >> "$GITHUB_OUTPUT")

      - name: Set deployment alias (production)
        if: |
          inputs.production_domain
          && (
            (
              github.event_name == 'release'
              && startsWith(github.event.release.name, 'v')
              && startsWith(github.event.release.tag_name, 'v')
            ) || (
              github.event_name == 'workflow_dispatch'
              && startsWith(github.ref_name, 'v')
            )
          )
        run: |
          vercel_organization_slug=$(
            curl GET --silent \
              --url 'https://vercel.com/api/v2/teams/${{ secrets.VERCEL_ORG_ID }}' \
              --header 'Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}' \
              | jq -r '.slug'
          )

          echo "Setting the deployment alias (scope: $vercel_organization_slug)"
          vercel alias set \
            '${{ steps.vercel_deploy.outputs.preview_url }}' \
            '${{ inputs.production_domain }}' \
            --scope="$vercel_organization_slug" \
            --token="${{ secrets.VERCEL_TOKEN }}"

      - name: Set deployment alias (preview)
        if: |
          inputs.staging_domain
          && github.ref_name == inputs.staging_branch
          && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        run: |
          echo 'Patching the domain ${{ inputs.staging_domain }} to ensure it is in preview mode'
          curl \
            --silent --fail \
            --request PATCH \
            --url 'https://vercel.com/api/v9/projects/${{ secrets.VERCEL_PROJECT_ID }}/domains/${{ inputs.staging_domain }}?teamId=${{ secrets.VERCEL_ORG_ID }}' \
            --header 'Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}' \
            --header 'Content-Type: application/json' \
            --data '{
              "redirect": null,
              "redirectStatusCode": null,
              "gitBranch": "main"
            }'

          vercel_organization_slug=$(
            curl GET --silent \
              --url 'https://vercel.com/api/v2/teams/${{ secrets.VERCEL_ORG_ID }}' \
              --header 'Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}' \
              | jq -r '.slug'
          )

          echo "Setting the deployment alias (scope: $vercel_organization_slug)"
          vercel alias set \
            '${{ steps.vercel_deploy.outputs.preview_url }}' \
            '${{ inputs.staging_domain }}' \
            --scope="$vercel_organization_slug" \
            --token="${{ secrets.VERCEL_TOKEN }}"

      - name: Create a GitHub deployment
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const response = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: '${{ github.event.pull_request.head.ref }}',
              auto_merge: false,
              environment: 'preview',
              production_environment: false,
              required_contexts: [],
            })

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: response.data.id,
              target_url: '${{ steps.vercel_deploy.outputs.preview_url }}',
              environment_url: '${{ steps.vercel_deploy.outputs.preview_url }}',
              state: 'success',
              auto_inactive: false,
            });
