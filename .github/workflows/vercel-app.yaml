name: Vercel app

on:
  workflow_call:
    inputs:
      install_command:
        description: Install command.
        type: string
        required: false
        default: npm ci --prefer-offline --no-audit --no-fund

      lint_command:
        description: Lint command.
        type: string
        required: false
        default: npm run lint
      
      test_command:
        description: Test command.
        type: string
        required: false
        default: npm run test

      npm_scope:
        description: "NPM scope (containing the '@' symbol, ex: @example)."
        type: string
        required: false
        default: null

      install_registry_url:
        description: >-
          The NPM registry URL to install scoped packages from.
          Scope specified in the input `npm_scope`.
        required: false
        default: null
        type: string

      ref_name_to_vercel_environment:
        description: A JSON map of the 'github.ref_name' to the vercel environment name.
        required: false
        default: '{"develop": "preview", "main": "production"}'
        type: string

    secrets:
      VERCEL_TOKEN:
        required: true
      VERCEL_ORG_ID:
        required: true
      VERCEL_PROJECT_ID:
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test-and-lint:
    name: Test and lint
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3
      
      - name: Custom checks to configs
        run: |
          [ -f "./.nvmrc" ] || (echo "Required .nvmrc file does not exist" >&2 && echo 1)
          [ -f "./vercel.json" ] || (echo "Required vercel.json file does not exist" >&2 && echo 1)

      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: npm
          scope: ${{ inputs.npm_scope }}
          registry-url: ${{ inputs.install_registry_url }}

      - name: Install dependencies
        run: ${{ inputs.install_command }}
        env:
          GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Lint
        if: inputs.lint_command
        run: ${{ inputs.lint_command }}

      - name: Test
        if: inputs.test_command
        run: ${{ inputs.test_command }}
  
  build-and-depploy:
    name: Build and deploy
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    needs:
      - test-and-lint
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: npm
          scope: ${{ inputs.npm_scope }}
          registry-url: ${{ inputs.install_registry_url }}

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information (release)
        if: |
          github.event_name == 'release'
          && startsWith(github.event.release.name, 'v')
          && startsWith(github.event.release.tag_name, 'v')
        run: |
          vercel pull --yes \
            --environment=production \
            --token="${{ secrets.VERCEL_TOKEN }}"

      - name: Pull Vercel Environment Information
        if: github.event_name != 'release'
        run: |
          vercel pull --yes \
            --environment=preview \
            --token="${{ secrets.VERCEL_TOKEN }}"

      - name: Build Project Artifacts
        run: |
          vercel build --token="${{ secrets.VERCEL_TOKEN }}" \

        env:
          GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: vercel_deploy
        shell: bash
        run: |
          vercel deploy --prebuilt --token="${{ secrets.VERCEL_TOKEN }}" \
          | tee >(tail -1 | sed -e 's/^/preview_url=/;' >> "$GITHUB_OUTPUT")

      - name: Create deployment
        uses: actions/github-script@v6
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: '${{ github.ref_name	}}',
              auto_merge: false,
              environment: 'preview',
              production_environment: false,
            })

            await octokit.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id,
              target_url: '${{ steps.vercel_deploy.outputs.preview_url }}',
              state: 'success',
            });